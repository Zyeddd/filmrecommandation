import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import numpy as np
import requests
from sklearn.neighbors import NearestNeighbors
from sklearn.preprocessing import OneHotEncoder
from st_clickable_images import clickable_images
from st_on_hover_tabs import on_hover_tabs

# Configuration de la page
st.set_page_config(page_title="WMDb", page_icon="üé¨", layout="wide", initial_sidebar_state="expanded")

# Constantes TMDb
API_KEY = '1efc9bac137c809078181e5c2c13cafc'
BASE_URL = 'https://api.themoviedb.org/3'
IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/w500'
YOUTUBE_BASE_URL = "https://www.youtube.com/watch?v="

# CSS custom
st.markdown("""
<style>
section[data-testid="stSidebar"] {
    background-color: #000 !important;
    width: 80px !important;
    min-width: 80px !important;
    transition: width 0.3s ease;
    overflow: hidden !important;
}
section[data-testid="stSidebar"]:hover {
    width: 400px !important;
    min-width: 400px !important;
}
section[data-testid="stSidebar"] ul li svg {
    color: #f5c518 !important;
    transition: color 0.3s ease;
}
section[data-testid="stSidebar"] ul li span {
    color: white !important;
    transition: color 0.3s ease;
}
section[data-testid="stSidebar"] ul li:hover span,
section[data-testid="stSidebar"] ul li[data-selected="true"] span {
    color: #f5c518 !important;
    font-weight: bold !important;
}
section[data-testid="stSidebar"] > div:before {
    content: "";
    display: flex;
    justify-content: flex-start;
    align-items: center;
    height: 90px;
    padding-left: 40px;
    background-image: url('https://i.imgur.com/woVWY9R.png');
    background-size: 68px auto;
    background-repeat: no-repeat;
    background-position: left center;
    margin-bottom: 10px;
}
section[data-testid="stSidebar"]:hover > div:before {
    background-size: 110px auto;
}
</style>
""", unsafe_allow_html=True)

# Chargement des donn√©es
@st.cache_data
def load_data():
    return pd.read_csv("df_imdb_final.csv")

df = load_data()

# Fonctions TMDb
@st.cache_data
def get_popular_movies():
    try:
        url = f"{BASE_URL}/movie/popular"
        params = {'api_key': API_KEY, 'language': 'fr-FR'}
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    except:
        return {'results': []}

def get_movie_details(movie_id):
    try:
        url = f"{BASE_URL}/movie/{movie_id}"
        params = {'api_key': API_KEY, 'language': 'fr-FR'}
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()
    except:
        return {}

def get_movie_trailer(movie_id):
    try:
        url = f"{BASE_URL}/movie/{movie_id}/videos"
        params = {'api_key': API_KEY, 'language': 'fr-FR'}
        response = requests.get(url, params=params)
        response.raise_for_status()
        videos = response.json().get("results", [])
        for video in videos:
            if video["type"] == "Trailer" and video["site"] == "YouTube":
                return f"{YOUTUBE_BASE_URL}{video['key']}"
        return None
    except:
        return None

# Barre lat√©rale
with st.sidebar:
    selected = on_hover_tabs(
        tabName=[
            'Accueil',
            'Notre d√©marche',
            'Le cin√©ma dans la Creuse',            
            'Chiffres-cl√©s',
            'Trouvez votre prochain film'
        ],
        iconName=['home', 'list', 'map', 'bar_chart', 'search'],
        default_choice=0
    )


# Onglet Accueil
if selected == "Accueil":
    st.title("WMDb : explorez le cin√©ma autrement !")

    st.markdown(
        "<div style='padding-left: 40px; font-size:20px;'>d'Hollywood √† la Creuse, il n'y a qu'un clic...</div><br><br>",
        unsafe_allow_html=True
    )

    st.markdown(
        """
        <div style='max-width: 85%; text-align: justify; font-size:16px; line-height:1.6;'>
            <p>
            Vous l'avez peut-√™tre remarqu√©, la Creuse, en collaboration avec les directions des cin√©mas, 
            a significativement renforc√© son offre de cin√©ma ces derni√®res ann√©es !
            </p>
            <p>
            Les directeurs de salle souhaitent accompagner cet √©lan en am√©liorant l'exp√©rience cin√©matographique de tous.
            C'est de cette volont√© qu'est n√©e la <strong>plateforme WMDb</strong>, qui vous propose des recommandations 
            de films personnalis√©es, adapt√©es √† vos go√ªts.
            </p>
            <p>
            √Ä terme, notre √©quipe <span style='text-decoration: line-through;'>de m√©diums et de voyants</span> 
            d'experts data sera m√™me en mesure de vous envoyer directement des recommandations cibl√©es 
            en fonction de vos pr√©f√©rences ! üîÆ
            </p>
        </div>
        """,
        unsafe_allow_html=True
    )

    st.markdown("**D√©couvrez d√®s maintenant les derni√®res sorties cin√© :**")

    st.markdown("""
    <hr style='margin-top:40px;'>
    <div style='text-align:center; font-size:13px; color:grey;'>
    Projet r√©alis√© par Stevens A., Christopher B., Alexis C., et Zyed G. ‚Äì Wild Code School ¬∑ Promo 2025
    </div>
    """, unsafe_allow_html=True)


    st.markdown("""
    <style>
    .film-card {
        background-color: #111;
        padding: 15px;
        border-radius: 10px;
        margin-bottom: 25px;
        display: flex;
        gap: 20px;
        min-height: 240px;
        transition: transform 0.3s ease;
    }
    .film-card:hover {
        transform: scale(1.02);
    }
    .film-card img {
        width: 120px;
        border-radius: 8px;
    }
    .film-info {
        display: flex;
        flex-direction: column;
        justify-content: center;
    }
    .film-title {
        font-size: 18px;
        font-weight: bold;
        color: #f5c518;
    }
    .film-note {
        color: white;
        font-weight: bold;
        margin-top: 4px;
    }
    .film-details {
        font-size: 14px;
        color: #ccc;
        margin-top: 4px;
    }
    .film-overview {
        font-size: 13px;
        color: #aaa;
        margin-top: 10px;
    }
    a {
        color: #1f77b4;
    }
    </style>
    """, unsafe_allow_html=True)

    with st.spinner("Chargement des films en tendance..."):
        popular_movies = get_popular_movies()

    if popular_movies["results"]:
        cols = st.columns(2)
        for i, movie in enumerate(popular_movies["results"][:8]):
            with cols[i % 2]:
                poster_path = movie.get("poster_path")
                movie_id = movie.get("id")
                details = get_movie_details(movie_id)
                trailer_url = get_movie_trailer(movie_id)

                card_html = "<div class='film-card'>"

                if poster_path:
                    poster_url = f"{IMAGE_BASE_URL}{poster_path}"
                    card_html += f"<img src='{poster_url}' alt='affiche'>"

                card_html += "<div class='film-info'>"
                card_html += f"<div class='film-title'>{movie['title']}</div>"
                card_html += f"<div class='film-details'>Date de sortie : {movie.get('release_date', 'N/A')}</div>"
                card_html += f"<div class='film-note'>‚≠ê {movie['vote_average']}/10 ({movie['vote_count']} votes)</div>"

                genres = [g["name"] for g in details.get("genres", [])]
                if genres:
                    card_html += f"<div class='film-details'>Genres : {', '.join(genres)}</div>"

                overview = movie.get('overview') or "R√©sum√© non disponible."
                short = overview[:180] + "..." if len(overview) > 180 else overview
                card_html += f"<div class='film-overview'>{short}</div>"

                if trailer_url:
                    card_html += f"<div class='film-details'><a href='{trailer_url}' target='_blank'>üéûÔ∏è Voir la bande-annonce</a></div>"

                card_html += "</div></div>"
                st.markdown(card_html, unsafe_allow_html=True)
    else:
        st.warning("Aucun film tendance trouv√© pour le moment.")


# Onglet Notre d√©marche
elif selected == "Notre d√©marche":
    st.title("Notre d√©marche")

    st.markdown("""
### Notre objectif üéØ

Notre √©quipe a √©t√© sollicit√©e par un directeur de cin√©ma dans la Creuse.  
Il souhaite dynamiser la fr√©quentation de son cin√©ma en proposant aux habitants un **moteur de recommandation de films personnalis√©**, qui permettra √† terme de leur envoyer des notifications en fonction de leurs pr√©f√©rences cin√©matographiques.  
Notre mission : **faire na√Ætre cette plateforme de recommandations.**

---

### Les √©tapes de notre projet üõ†Ô∏è

Nous avons d√©marr√© d'une situation de **cold start** : aucune pr√©f√©rence utilisateur enregistr√©e.  
Pour r√©pondre √† ce d√©fi, nous avons d√©coup√© notre travail en plusieurs √©tapes : √©tude de march√© locale, exploration des donn√©es, cr√©ation de dashboards, et mise en place d‚Äôun moteur de recommandations intelligent bas√© sur les pr√©f√©rences cin√©matographiques.

---

#### üó∫Ô∏è A. √âtude de march√© sur la Creuse
                
Une premi√®re analyse a √©t√© men√©e √† l'aide des donn√©es du **CNC** et de **l'INSEE**.
Elle nous a permis d'identifier les caract√©ristiques de la population de la Creuse ainsi que son lien avec le cin√©ma.  

---
#### üñ•Ô∏èB. Analyse et cr√©ation du syst√®me de recommandations
                
#### üì¶ 1. Collecte des donn√©es
- Bases de donn√©es volumineuses au format `.tsv.gz` extraites depuis le site IMDb
- Objectif : r√©cup√©rer les **informations essentielles** pour recommander des films (titre, genres, r√©alisateurs, acteurs, notes‚Ä¶)
- Challenge : **volum√©trie tr√®s √©lev√©e** ‚Üí n√©cessit√© de filtrer, croiser, simplifier


#### üßπ 2. Nettoyage et pr√©paration
- Suppression des lignes incompl√®tes ou inutilisables
- √âlimination des colonnes non pertinentes
- Filtres avanc√©s (nombre de votes, note, langue, r√©gion‚Ä¶)
- Jointures sur les fichiers `title.basics`, `title.ratings`, `name.basics`, `title.principals`
- Cr√©ation de nouvelles colonnes (d√©cennie, genre1/2/3, etc.)
‚úÖ R√©sultat : **`df_imdb_final.csv`**


#### üß† 3. Exploration & analyses
- Visualisation des genres, notes, votes
- Identification des **films, r√©alisateurs, acteurs les plus pr√©sents**
- Cr√©ation de **KPI visuels** pour mieux comprendre les pr√©f√©rences


#### ü§ñ 4. Recommandation de films
- Approche **KNN (proches voisins)** fond√©e sur les genres
- Filtrage possible par **r√©alisateur**, **acteurs** ou **genres**
- Tri final par **note d√©croissante**


#### üåê 5. D√©ploiement de l'application
- Interface **Streamlit** enti√®rement personnalis√©e (charte graphique IMDb, animations, navigation optimis√©e)
- H√©bergement sur GitHub + Streamlit Cloud

---

#### üîß Outils utilis√©s
- Python (Pandas, scikit-learn, seaborn‚Ä¶)
- GitHub
- Trello
- Streamlit

---

#### üìÇ Ressources
- Fichiers IMDb `.tsv.gz` (title, ratings, names, principals‚Ä¶)
- Documentation officielle IMDb
- API TMDb pour les affiches & r√©sum√©s
""", unsafe_allow_html=True)

# Onglet Creuse
elif selected == "Le cin√©ma dans la Creuse":
    st.title("üå≥ Un d√©partement marqu√© par des d√©fis socio-√©conomiques") #PARTIE 1/2
    st.subheader("Une population  vieillissante") #SOUS-PARTIE 1/2

    col1, col2 = st.columns([1.3, 1.7])  # √©largir l√©g√®rement la colonne 1 pour l'image

    with col1:
        st.image("evol_repa_ages.png", use_container_width=True)

    with col2:
        st.markdown(
            """
            <div style="display: flex; align-items: center; height: 100%; min-height: 450px;">
                <div style="font-size:16px;">
                    Entre <strong>2010</strong> et <strong>2021</strong>, la population de la Creuse a diminu√© de <strong>6%</strong>.<br>
                    Cette baisse globale masque une √©volution marquante : la seule tranche d‚Äô√¢ge en hausse est celle des 
                    <strong>60 √† 74 ans</strong>, en progression de <strong>+22,4%</strong>. 
                    Le d√©partement vieillit donc de mani√®re significative.
                </div>
            </div>
            """,
            unsafe_allow_html=True
        )


    st.subheader("Un territoire en difficult√© √©conomique")  # SOUS-PARTIE 2/2

    col1, col2 = st.columns([1, 2])

    with col1:
        st.markdown("""
        <div style="font-size:16px; text-align: justify; padding-top: 30%;">
            En <strong>2021</strong>, le revenu m√©dian annuel des habitants de la Creuse √©tait de <strong>20‚ÄØ620‚ÄØ‚Ç¨</strong>,
            soit bien en dessous de la m√©diane r√©gionale (<strong>22‚ÄØ710‚ÄØ‚Ç¨</strong>) et nationale (<strong>24‚ÄØ330‚ÄØ‚Ç¨</strong>).
            <br><br>
            Ce diff√©rentiel souligne les <strong>difficult√©s √©conomiques</strong> auxquelles est confront√© le territoire :
            <strong>1 personne sur 5</strong> vit sous le <strong>seuil de pauvret√©</strong>.
        </div>
        """, unsafe_allow_html=True)

    with col2:
        df_revenus = pd.DataFrame({
            "Territoire": ["Creuse", "Nouvelle-Aquitaine", "France"],
            "Revenu m√©dian (‚Ç¨)": [20620, 22710, 24330]
        })

        fig_rev = px.bar(
            df_revenus,
            x="Territoire",
            y="Revenu m√©dian (‚Ç¨)",
            text="Revenu m√©dian (‚Ç¨)",
            color="Territoire",
            color_discrete_sequence=["#F5C518", "#AAAAAA", "#666666"]
        )

        fig_rev.update_traces(
            texttemplate='%{text:.0f}‚Ç¨',
            textposition='inside',
            insidetextanchor='end'
        )

        fig_rev.update_layout(
            title="Comparaison du revenu m√©dian en 2021",
            yaxis_title="Revenu m√©dian annuel (‚Ç¨)",
            xaxis_title="",
            showlegend=False,
            yaxis=dict(tickformat=","),
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font=dict(color='white'),
            margin=dict(t=60, b=40)
        )

        st.plotly_chart(fig_rev, use_container_width=True)

    st.title("üõ°Ô∏è Un cin√©ma local qui r√©siste")  # PARTIE 2/2

    # SOUS-PARTIE 1/3 : Infrastructures
    st.subheader("Infrastructures disponibles")

    kpi_cols = st.columns(3)
    kpi_data = [
        ("üèõÔ∏è", "7 salles de cin√©ma"),
        ("üé¨", "12 √©crans"),
        ("üçø", "2‚ÄØ150 fauteuils")
    ]

    for col, (emoji, label) in zip(kpi_cols, kpi_data):
        with col:
            st.markdown(f"<div style='text-align:center;font-size:22px;'>{emoji} {label}</div>", unsafe_allow_html=True)

    # SOUS-PARTIE 2/3 : Offre d√©multipli√©e
    st.markdown("<br>", unsafe_allow_html=True)
    st.markdown("<br>", unsafe_allow_html=True)
    st.subheader("Une offre cin√©matographique d√©cupl√©e")

    card_style = (
        "background-color:#white;border-radius:12px;padding:25px;"
        "color:black;text-align:center;"
    )

    col_left, col_right = st.columns([1, 1])

    # Carte 1 ‚Äì Diffusions
    with col_left:
        st.markdown(
            f"""
            <div style="{card_style}">
                <div style="font-size:18px;font-weight:bold;">Projections</div>
                <div style="font-size:38px;font-weight:bold;margin:8px 0;">
                    74 400
                </div>
                <div style="font-size:24px; line-height:1.3;">
                    films diffus√©s en 2022<br>
                    <span style="color:#FF4B4B;font-size:18px;">‚ñ≤ +755% par rapport √† 2015</span>
                </div>
                <div style="font-size:11px;font-style:italic;margin-top:8px;">
                    Source : CNC
                </div>
            </div>
            """,
            unsafe_allow_html=True,
        )

    # Carte 2 ‚Äì Fr√©quentation
    with col_right:
        st.markdown(
            f"""
            <div style="{card_style}">
                <div style="font-size:18px;font-weight:bold;">Fr√©quentation</div>
                <div style="font-size:38px;font-weight:bold;margin:8px 0;">
                    1,168&nbsp;M
                </div>
                <div style="font-size:24px; line-height:1.3;">
                    entr√©es en 2022<br>
                    <span style="color:#FF4B4B;font-size:18px;">‚ñ≤ +567% par rapport √† 2015</span>
                </div>
                <div style="font-size:11px;font-style:italic;margin-top:8px;">
                    Source : CNC
                </div>
            </div>
            """,
            unsafe_allow_html=True,
        )
    
    st.markdown("""
    <br>
    <div style="font-size:16px;">
    L‚Äôoffre cin√©matographique a √©t√© <strong>massivement renforc√©e depuis 2015</strong>, avec une hausse remarquable des <strong>projections</strong> (+755%) et de la <strong>fr√©quentation</strong> (+567%) sur l‚Äôensemble du territoire.
    </div>
    """, unsafe_allow_html=True)

# SOUS-PARTIE 3/3 : ARTS ET ESSAI
    st.subheader("La Creuse, terre de cin√©ma engag√©")
    st.markdown(
    """
    <div style="text-align:center; font-size:38px; font-weight:bold; margin-bottom:0.2em;">
        üìú 11 cin√©mas sur 12
    </div>
    <div style="text-align:center; font-size:16px;">
        sont labellis√©s <strong>Art & Essai</strong>
    </div>
    """,
    unsafe_allow_html=True
)
    st.markdown(
    """
    <div style=font-size:15px;">
    Ce label, soutenu par les instances culturelles, met en lumi√®re et participe au financement des programmations mettant en avant des films de qualit√© artistique, culturelle ou patrimoniale.<br>
    Un √©l√©ment suppl√©mentaire √† prendre en compte pouvant favoriser une √©mulation</strong>.
    </div>
    """,
    unsafe_allow_html=True
)


# Onglet Chiffres-cl√©s
elif selected == "Chiffres-cl√©s":
    st.title("Chiffres-cl√©s")

    st.subheader("R√©partition des genres avec note moyenne et r√©alisateur populaire")
    df_genres = df.groupby("genre1_film").agg(Nombre_de_films=("genre1_film", "count"), AverageRating=("averageRating", "mean")).reset_index().rename(columns={"genre1_film": "Genre"})
    df_genres["AverageRating"] = df_genres["AverageRating"].round(2)

    def get_most_popular_movie(genre):
        sub_df = df[df["genre1_film"] == genre]
        if sub_df.empty:
            return "Non sp√©cifi√©"
        group = sub_df.groupby("title")["numVotes"].sum()
        return group.idxmax() if not group.empty else "Non sp√©cifi√©"

    df_genres["Film_populaire"] = df_genres["Genre"].apply(get_most_popular_movie)

    genre_colors = {"Comedy": "#FFCC00", "Drama": "#FF5733", "Action": "#C70039", "Crime": "#900C3F", "Biography": "#581845", "Adventure": "#1A5276", "Documentary": "#2E86C1", "Horror": "#117A65", "Animation": "#D4AC0D", "Mystery": "#6C3483", "Thriller": "#A04000"}
    df_genres["Color"] = df_genres["Genre"].map(genre_colors)

    fig_treemap = px.treemap(df_genres, path=["Genre", "Film_populaire", "AverageRating"], values="Nombre_de_films", title="R√©partition des genres de films", color="Genre", color_discrete_map=genre_colors)
    st.plotly_chart(fig_treemap)

    st.subheader("Dur√©e moyenne des films par genre")

    avg_duration = df.groupby("genre1_film")["duration"].mean().sort_values(ascending=False).head(10)
    avg_duration_df = avg_duration.reset_index()
    avg_duration_df.columns = ["Genre", "Dur√©e moyenne"]

    # Appliquer la m√™me couleur que dans le treemap, sinon gris clair par d√©faut
    avg_duration_df["Color"] = avg_duration_df["Genre"].map(genre_colors).fillna("#DDDDDD")

    fig2 = px.bar(
        avg_duration_df,
        x="Genre",
        y="Dur√©e moyenne",
        title="Dur√©e moyenne des films par genre",
        color="Genre",
        color_discrete_map=genre_colors,
        labels={"Dur√©e moyenne": "Dur√©e moyenne (minutes)"}
    )
    st.plotly_chart(fig2)


    st.subheader("Top 10 r√©alisateurs par nombre de votes")

    # Agr√©gation par nombre de votes
    top_directors_votes = (
        df.groupby("name_dir")["numVotes"]
        .sum()
        .sort_values(ascending=False)
        .head(10)
    )

    # Palette sobre : jaune orang√© clair
    colors = sns.color_palette("YlOrBr", n_colors=10)[::-1]

    # Trac√© du graphique
    plt.figure(figsize=(10, 6))
    bars = sns.barplot(
        x=top_directors_votes.values / 1_000_000,
        y=top_directors_votes.index,
        palette=colors
    )

    # Ajout des √©tiquettes sur les barres
    for i, v in enumerate(top_directors_votes.values / 1_000_000):
        bars.text(v + 0.1, i, f"{v:.1f}M", va='center')

    plt.title("Top 10 des r√©alisateurs les plus populaires")
    plt.xlabel("Nombre de votes (en millions)")
    plt.ylabel("R√©alisateurs")
    plt.tight_layout()

    st.pyplot(plt.gcf())


    st.subheader("Acteurs les plus populaires par genre")
    # Pr√©paration des donn√©es
    actor_melted = pd.melt(
        df,
        id_vars=['numVotes', 'genre1_film', 'genre2_film', 'genre3_film'],
        value_vars=['name_act1', 'name_act2', 'name_act3'],
        value_name='name_act'
    ).dropna(subset=['name_act'])

    genre_actor_melted = pd.melt(
        actor_melted,
        id_vars=['numVotes', 'name_act'],
        value_vars=['genre1_film', 'genre2_film', 'genre3_film'],
        value_name='genre'
    ).dropna(subset=['genre'])

    genre_rating_actor_stats = genre_actor_melted.groupby(["genre", "name_act"])["numVotes"].sum().reset_index()
    top_actors_per_genre = genre_rating_actor_stats.loc[
        genre_rating_actor_stats.groupby("genre")["numVotes"].idxmax()
    ]
    top_actors_per_genre_sorted = top_actors_per_genre.sort_values(by="numVotes", ascending=False).head(10)

    fig4 = px.sunburst(
        top_actors_per_genre_sorted,
        path=['genre', 'name_act'],
        values='numVotes',
        color='numVotes',
        color_continuous_scale='Plasma',
        width=800,
        height=800,
        labels={'numVotes': 'Nombre de Votes'}
    )
    fig4.update_layout(
        font=dict(size=16),
        title="üîπ Acteurs les plus populaires par Genre"
    )
    st.plotly_chart(fig4)

# Onglet Recommandation
# Onglet Recommandation
elif selected == "Trouvez votre prochain film":
    st.title("Trouvez votre prochain film")
    st.markdown(
                "<div style='font-size:20px;'><strong>Vous n'√™tes plus qu'√† quelques swipes de votre prochain match cin√©matographique... ‚ù§Ô∏è‚Äçüî•</strong></div>",
                unsafe_allow_html=True)

    film_choices = sorted(df["title"].dropna().unique())
    selected_title = st.selectbox("üé¨ Choisissez un film que vous aimez :", [""] + film_choices)

    genres_list = sorted(set(g for g in pd.unique(df[["genre1_film", "genre2_film", "genre3_film"]].values.ravel()) if pd.notna(g)))
    directors_list = sorted(df["name_dir"].dropna().unique())
    actors_list = sorted(set(a for a in pd.unique(df[["name_act1", "name_act2", "name_act3"]].values.ravel()) if pd.notna(a)))

    st.markdown(
                "<div style='font-size:20px;'><strong>Trop de matches ? Affinez votre recherche üéØ</strong></div>",
                unsafe_allow_html=True)   
    selected_genres = st.multiselect("Genres :", genres_list)
    selected_director = st.selectbox("R√©alisateur :", [""] + directors_list)
    selected_actors = st.multiselect("Acteurs pr√©f√©r√©s (2 max) :", actors_list, max_selections=2)

    recommended = df.copy()

    # Cr√©ation de la colonne "decade" dans recommended uniquement
    recommended["decade"] = (recommended["year"] // 10 * 10).astype(int).astype(str) + "s"

    # D√©cennies disponibles
    decades = sorted(recommended["decade"].dropna().unique())
    selected_decade = st.selectbox("D√©cennie :", options=["Toutes"] + decades)

    # Application du filtre d√©cennal
    if selected_decade != "Toutes":
        recommended = recommended[recommended["decade"] == selected_decade]


    # 1. FILM SIMILAIRE (si titre saisi)
    if selected_title:
        ref_row = df[df["title"] == selected_title].iloc[0]
        ref_genres = set([ref_row["genre1_film"], ref_row["genre2_film"], ref_row["genre3_film"]]) - {np.nan}
        def count_common_genres(row):
            film_genres = set([row["genre1_film"], row["genre2_film"], row["genre3_film"]]) - {np.nan}
            return len(ref_genres & film_genres)
        recommended = recommended[recommended["title"] != selected_title]
        recommended["common_genres"] = recommended.apply(count_common_genres, axis=1)
        recommended = recommended[recommended["common_genres"] > 0]
    else:
        recommended["common_genres"] = 0

    # 2. FILTRES GENRES
    if selected_genres:
        recommended = recommended[
            recommended[["genre1_film", "genre2_film", "genre3_film"]].apply(
                lambda x: any(g in selected_genres for g in x if pd.notna(g)), axis=1
            )
        ]

    # 3. FILTRE R√âALISATEUR
    if selected_director:
        recommended = recommended[recommended["name_dir"] == selected_director]

    # 4. FILTRE ACTEURS
    if selected_actors:
        def count_common_actors(row):
            film_actors = set([row["name_act1"], row["name_act2"], row["name_act3"]]) - {np.nan}
            return len(film_actors & set(selected_actors))
        recommended["common_actors"] = recommended.apply(count_common_actors, axis=1)
        recommended = recommended[recommended["common_actors"] >= 2]
    else:
        recommended["common_actors"] = 0

    recommended = recommended.sort_values(by=["common_genres", "averageRating"], ascending=[False, False])

    st.subheader("üîç Films recommand√©s")

    st.markdown("""
    <style>
    .film-card {
        background-color: #111;
        padding: 15px;
        border-radius: 10px;
        margin-bottom: 25px;
        display: flex;
        gap: 20px;
        min-height: 240px;
        transition: transform 0.3s ease;
    }
    .film-card:hover {
        transform: scale(1.02);
    }
    .film-card img {
        width: 120px;
        border-radius: 8px;
    }
    .film-info {
        display: flex;
        flex-direction: column;
        justify-content: center;
    }
    .film-title {
        font-size: 18px;
        font-weight: bold;
        color: #f5c518;
    }
    .film-note {
        color: white;
        font-weight: bold;
        margin-top: 4px;
    }
    .film-details {
        font-size: 14px;
        color: #ccc;
        margin-top: 4px;
    }
    .film-overview {
        font-size: 13px;
        color: #aaa;
        margin-top: 10px;
    }
    a {
        color: #1f77b4;
    }
    </style>
    """, unsafe_allow_html=True)

    if not recommended.empty:
        cols = st.columns(2)
        for i, (_, row) in enumerate(recommended.head(8).iterrows()):
            with cols[i % 2]:
                imdb_id = row["titleID"]
                api_url = f"https://api.themoviedb.org/3/find/{imdb_id}?api_key={API_KEY}&language=fr-FR&external_source=imdb_id"
                response = requests.get(api_url)
                data = response.json().get("movie_results", [])
                poster_path = data[0].get("poster_path") if data else None
                tmdb_id = data[0].get("id") if data else None

                # D√©tails + bande-annonce
                details = {}
                trailer_url = None
                if tmdb_id:
                    try:
                        details = requests.get(f"{BASE_URL}/movie/{tmdb_id}?api_key={API_KEY}&language=fr-FR").json()
                        videos = requests.get(f"{BASE_URL}/movie/{tmdb_id}/videos?api_key={API_KEY}&language=fr-FR").json()
                        for video in videos.get("results", []):
                            if video["type"] == "Trailer" and video["site"] == "YouTube":
                                trailer_url = f"{YOUTUBE_BASE_URL}{video['key']}"
                                break
                    except:
                        pass

                card_html = "<div class='film-card'>"
                if poster_path:
                    poster_url = f"https://image.tmdb.org/t/p/w200{poster_path}"
                    card_html += f"<img src='{poster_url}' alt='affiche'>"

                card_html += "<div class='film-info'>"
                card_html += f"<div class='film-title'>{row['title']}</div>"
                card_html += f"<div class='film-note'>‚≠ê {row['averageRating']}/10</div>"

                genres = ', '.join(g for g in [row['genre1_film'], row['genre2_film'], row['genre3_film']] if pd.notna(g))
                if genres:
                    card_html += f"<div class='film-details'>Genres : {genres}</div>"

                if row["name_dir"]:
                    card_html += f"<div class='film-details'>R√©alisateur : {row['name_dir']}</div>"

                overview = details.get("overview") or "R√©sum√© non disponible."
                short = overview[:180] + "..." if len(overview) > 180 else overview
                card_html += f"<div class='film-overview'>{short}</div>"

                if trailer_url:
                    card_html += f"<div class='film-details'><a href='{trailer_url}' target='_blank'>üéûÔ∏è Voir la bande-annonce</a></div>"

                card_html += "</div></div>"
                st.markdown(card_html, unsafe_allow_html=True)
    else:
        st.warning("Aucun film ne correspond √† vos crit√®res.")

